# Generated by Django 5.2.6 on 2025-09-25 19:00

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("product", "0001_initial"),
        ("purchase", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Auto-generated unique identifier for the service",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Service date and time",
                    ),
                ),
                (
                    "service_type",
                    models.CharField(
                        choices=[
                            ("warranty", "Warranty Service"),
                            ("repair", "Repair Service"),
                            ("maintenance", "Maintenance"),
                            ("replacement", "Replacement"),
                            ("installation", "Installation"),
                            ("support", "Technical Support"),
                            ("consultation", "Consultation"),
                            ("training", "Training"),
                        ],
                        default="warranty",
                        help_text="Type of service provided",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the service provided"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("requested", "Requested"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("on_hold", "On Hold"),
                        ],
                        default="requested",
                        help_text="Current status of the service",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        help_text="Priority level of the service",
                        max_length=10,
                    ),
                ),
                (
                    "service_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Cost of the service",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "technician_notes",
                    models.TextField(
                        blank=True, help_text="Notes from the technician", null=True
                    ),
                ),
                (
                    "customer_feedback",
                    models.TextField(
                        blank=True,
                        help_text="Customer feedback about the service",
                        null=True,
                    ),
                ),
                (
                    "rating",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "1"), (2, "2"), (3, "3"), (4, "4"), (5, "5")],
                        help_text="Customer rating (1-5 stars)",
                        null=True,
                    ),
                ),
                (
                    "scheduled_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Scheduled service date (if different from service date)",
                        null=True,
                    ),
                ),
                (
                    "completed_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date when service was completed",
                        null=True,
                    ),
                ),
                (
                    "warranty_expires",
                    models.DateField(
                        blank=True,
                        help_text="Service warranty expiration date",
                        null=True,
                    ),
                ),
                (
                    "is_under_warranty",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the service is covered under warranty",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether the service record is active"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "product",
                    models.ForeignKey(
                        help_text="The product this service is for",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="services",
                        to="product.product",
                    ),
                ),
                (
                    "purchase",
                    models.ForeignKey(
                        help_text="The purchase this service is related to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="services",
                        to="purchase.purchase",
                    ),
                ),
            ],
            options={
                "verbose_name": "Service",
                "verbose_name_plural": "Services",
                "ordering": ["-date", "-created_at"],
                "indexes": [
                    models.Index(fields=["date"], name="services_se_date_4e55d2_idx"),
                    models.Index(
                        fields=["purchase", "date"],
                        name="services_se_purchas_08ed8b_idx",
                    ),
                    models.Index(
                        fields=["product", "date"],
                        name="services_se_product_8f892a_idx",
                    ),
                    models.Index(
                        fields=["status"], name="services_se_status_288ecc_idx"
                    ),
                    models.Index(
                        fields=["service_type"], name="services_se_service_9fa833_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="services_se_created_ebde2c_idx"
                    ),
                ],
            },
        ),
    ]
