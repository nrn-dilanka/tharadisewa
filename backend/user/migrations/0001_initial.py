# Generated by Django 5.2.6 on 2025-09-27 08:48

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(help_text='First name', max_length=30)),
                ('last_name', models.CharField(help_text='Last name', max_length=30)),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('manager', 'Manager'), ('staff', 'Staff'), ('customer', 'Customer'), ('technician', 'Technician'), ('sales', 'Sales Representative'), ('support', 'Support Staff'), ('owner', 'Business Owner')], default='customer', help_text='User role', max_length=20)),
                ('phone_number', models.CharField(blank=True, help_text='Phone number', max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be in format: '+94771234567' or '0771234567'", regex='^\\+?1?\\d{9,15}$')])),
                ('email', models.EmailField(help_text='Email address', max_length=254, unique=True)),
                ('is_verified', models.BooleanField(default=False, help_text='Whether the user is verified')),
                ('profile_image', models.ImageField(blank=True, help_text='Profile image', null=True, upload_to='user_profiles/')),
                ('date_of_birth', models.DateField(blank=True, help_text='Date of birth', null=True)),
                ('address', models.TextField(blank=True, help_text='Address')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
